@page "/autores/editar/{id:int}"
@using Proyecto2.Frontend.Models
@using Proyecto2.Frontend.Services
@using Proyecto2.Frontend.Auth
@inherits ProtectedComponentBase
@inject IAutorService AutorService
@inject ISnackbar Snackbar

<MudPaper Class="p-6 mx-auto mt-4" Elevation="4" Style="max-width: 600px;">
    <MudText Typo="Typo.h5">Editar Autor</MudText>

    @if (_autor is not null)
    {
        <MudForm @ref="_form">
            <MudTextField @bind-Value="_autor.NombreCompleto" Label="Nombre completo" Required="true" />
            <MudDatePicker @bind-Date="_autor.FechaNacimiento" Label="Fecha de nacimiento" Required="true" />
            <MudTextField @bind-Value="_autor.Ciudad" Label="Ciudad de procedencia" />
            <MudTextField @bind-Value="_autor.Correo" Label="Correo electrónico" />

            <MudButton OnClick="ActualizarAutor" Class="mt-4" Color="Color.Primary" Variant="Variant.Filled">
                Guardar Cambios
            </MudButton>
        </MudForm>
    }
    else
    {
        <MudProgressCircular Indeterminate="true" />
    }
</MudPaper>

@code {
    [Parameter] public int id { get; set; }

    private AutorDto? _autor;
    private MudForm _form;

    protected override async Task OnAuthenticatedInitializedAsync()
    {
        _autor = await AutorService.ObtenerPorIdAsync(id);
    }

    private async Task ActualizarAutor()
    {
        await _form.Validate();

        if (_form.IsValid)
        {
            var actualizado = await AutorService.ActualizarAsync(id, _autor!);

            if (actualizado)
            {
                Snackbar.Add("Autor actualizado correctamente", Severity.Success);
            }
            else
            {
                Snackbar.Add("Error al actualizar autor", Severity.Error);
            }
        }
    }
}
